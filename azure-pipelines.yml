# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master
- develop

pool:
  vmImage: 'VS2017-Win2016'

variables:
  buildConfiguration: 'Release'
  major: 5
  minor: 0
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named patch.
  patch: $[counter('versioncounter', 100)]
  

steps:
# Windows script setting up  $(version) of the nuget package if this is development branch build
- script: |
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)-prerelease
  name: 'SettingPrereleaseNugetPackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
- script: | 
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)
  name: 'SettingNugetPackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

- task: NuGetToolInstaller@0  

# xBIM Common
- script: dotnet pack Xbim.Common/Xbim.Common.csproj -c Release /p:PackageVersion=$(version)
  name: 'Common_Pack'

- task: CopyFiles@2
  name: 'Common_StagingArtefacts'
  inputs:
    sourceFolder: 'Xbim.Common'
    contents: '**\bin\$(BuildConfiguration)\*.nupkg' 
    targetFolder: '$(build.artifactstagingdirectory)'
    cleanTargetFolder: true

# xBIM Ifc4
- script: dotnet add Xbim.Ifc4/Xbim.Ifc4.csproj package Xbim.Common -s '$(build.artifactstagingdirectory)' -v $(version)

- script: dotnet pack Xbim.Ifc4/Xbim.Ifc4.csproj -c Release /p:PackageVersion=$(version)
  name: 'Ifc4_Pack'
  
- task: CopyFiles@2
  name: 'Ifc4_StagingArtefacts'
  inputs:
    sourceFolder: 'Xbim.Ifc4'
    contents: '**\bin\$(BuildConfiguration)\*.nupkg' 
    targetFolder: '$(build.artifactstagingdirectory)'

# Publish
- task: NuGetCommand@2
  name: 'MyGetPublishing_Master'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetMaster'
    versioningScheme: byEnvVar
    versionEnvVar: version

- task: NuGetCommand@2
  name: 'MyGetPublishing_Develop'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetDev'
    versioningScheme: byEnvVar
    versionEnvVar: version

# .NET Core
# Build, test, package, or publish a dotnet application, or run a custom dotnet command. For package commands, supports NuGet.org and authenticated feeds like Package Management and MyGet.
#- task: DotNetCoreCLI@2
#  inputs:
    #command: 'build' # Options: build, push, pack, publish, restore, run, test, custom
    #publishWebProjects: true # Required when command == Publish
    #projects: # Optional
    #custom: # Required when command == Custom
    #arguments: # Optional
    #publishTestResults: true # Optional
    #zipAfterPublish: true # Optional
    #modifyOutputPath: true # Optional
    #feedsToUse: 'select' # Options: select, config
    #vstsFeed: # Required when feedsToUse == Select
    #includeNuGetOrg: true # Required when feedsToUse == Select
    #nugetConfigPath: # Required when feedsToUse == Config
    #externalFeedCredentials: # Optional
    #noCache: false 
    #restoreDirectory: 
    #verbosityRestore: 'Detailed' # Options: -, quiet, minimal, normal, detailed, diagnostic
    #packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg' # Required when command == Push
    #nuGetFeedType: 'internal' # Required when command == Push# Options: internal, external
    #publishVstsFeed: # Required when command == Push && NuGetFeedType == Internal
    #publishFeedCredentials: # Required when command == Push && NuGetFeedType == External
    #packagesToPack: '**/*.csproj' # Required when command == Pack
    #configuration: '$(BuildConfiguration)' # Optional
    #packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    #nobuild: false # Optional
    #versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #versionEnvVar: # Required when versioningScheme == ByEnvVar
    #majorVersion: '1' # Required when versioningScheme == ByPrereleaseNumber
    #minorVersion: '0' # Required when versioningScheme == ByPrereleaseNumber
    #patchVersion: '0' # Required when versioningScheme == ByPrereleaseNumber
    #buildProperties: # Optional
    #verbosityPack: 'Detailed' # Options: -, quiet, minimal, normal, detailed, diagnostic
    #workingDirectory: 