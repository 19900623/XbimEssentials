# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master
- develop

pool:
  vmImage: 'VS2017-Win2016'

variables:
  s_common: 'Xbim.Common/Xbim.Common.sln'
  s_ifc4: 'Xbim.Ifc4/Xbim.Ifc4.sln'
  s_ifc2x3: 'Xbim.Ifc2x3/Xbim.Ifc2x3.sln'
  s_memory: 'Xbim.IO.MemoryModel/Xbim.IO.MemoryModel.sln'
  s_esent: 'Xbim.IO.Esent/Xbim.IO.Esent.sln'
  s_ifc: 'Xbim.Ifc/Xbim.Ifc.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 5
  minor: 0
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named patch.
  patch: $[counter('versioncounter', 100)]
  feed: 'XXX'

steps:
# Windows script setting up  $(version) of the nuget package if this is development branch build
- script: |
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)-prerelease
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
- script: |
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
- script: |
    echo Version: $(version)


- task: NuGetToolInstaller@0

#- task: DotNetCoreCLI@2
#  inputs:
#    command: restore
#    projects: 'Xbim.Common/Xbim.Common.csproj'
#    feedsToUse: config
#    nugetConfigPath: nuget.config    

- task: DotNetCoreCLI@2
  name: 'Build XbimCommon'
  inputs:
    command: build
    configuration: '$(buildConfiguration)'
    projects: 'Xbim.Common/Xbim.Common.csproj'
    feedsToUse: config
    nugetConfigPath: nuget.config    
   
- task: DotNetCoreCLI@2
  name: 'Pack XbimCommon'
  inputs:
    command: pack
    configuration: '$(buildConfiguration)'
    projects: 'Xbim.Common/Xbim.Common.csproj'
    feedsToUse: config
    nugetConfigPath: nuget.config    
    versioningScheme: byEnvVar
    versionEnvVar: version

- task: CopyFiles@2
  name: 'Copy .nupkg files to artifacts staging directory'
  inputs:
    sourceFolder: 'Xbim.Common'
    contents: '**\bin\$(BuildConfiguration)\*.nupkg' 
    targetFolder: '$(build.artifactstagingdirectory)'
    cleanTargetFolder: true

- task: NuGetCommand@2
  name: 'Publish to MyGet'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetMaster'
    versioningScheme: byEnvVar
    versionEnvVar: version

# MSBuild
# Build with MSBuild
#- task: MSBuild@1
#  inputs:
#    project: 'Xbim.Common/Xbim.Common.csproj'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
    #restoreNugetPackages: true # Deprecated
    #solution: '**/*.sln' 
    #msbuildLocationMethod: 'version' # Optional. Options: version, location
    #msbuildVersion: 'latest' # Optional. Options: latest, 15.0, 14.0, 12.0, 4.0
    #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
    #msbuildLocation: # Optional
    #msbuildArguments: # Optional
    #clean: false # Optional
    #maximumCpuCount: false # Optional
    #logProjectEvents: false # Optional
    #createLogFile: false # Optional
    
#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
#
#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

# .NET Core
# Build, test, package, or publish a dotnet application, or run a custom dotnet command. For package commands, supports NuGet.org and authenticated feeds like Package Management and MyGet.
#- task: DotNetCoreCLI@2
#  inputs:
    #command: 'build' # Options: build, push, pack, publish, restore, run, test, custom
    #publishWebProjects: true # Required when command == Publish
    #projects: # Optional
    #custom: # Required when command == Custom
    #arguments: # Optional
    #publishTestResults: true # Optional
    #zipAfterPublish: true # Optional
    #modifyOutputPath: true # Optional
    #feedsToUse: 'select' # Options: select, config
    #vstsFeed: # Required when feedsToUse == Select
    #includeNuGetOrg: true # Required when feedsToUse == Select
    #nugetConfigPath: # Required when feedsToUse == Config
    #externalFeedCredentials: # Optional
    #noCache: false 
    #restoreDirectory: 
    #verbosityRestore: 'Detailed' # Options: -, quiet, minimal, normal, detailed, diagnostic
    #packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg' # Required when command == Push
    #nuGetFeedType: 'internal' # Required when command == Push# Options: internal, external
    #publishVstsFeed: # Required when command == Push && NuGetFeedType == Internal
    #publishFeedCredentials: # Required when command == Push && NuGetFeedType == External
    #packagesToPack: '**/*.csproj' # Required when command == Pack
    #configuration: '$(BuildConfiguration)' # Optional
    #packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    #nobuild: false # Optional
    #versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #versionEnvVar: # Required when versioningScheme == ByEnvVar
    #majorVersion: '1' # Required when versioningScheme == ByPrereleaseNumber
    #minorVersion: '0' # Required when versioningScheme == ByPrereleaseNumber
    #patchVersion: '0' # Required when versioningScheme == ByPrereleaseNumber
    #buildProperties: # Optional
    #verbosityPack: 'Detailed' # Options: -, quiet, minimal, normal, detailed, diagnostic
    #workingDirectory: 